""""- Una **clase** se define con la palabra clave `class`.
- El m√©todo especial `__init__` es el **constructor**, se ejecuta al crear un objeto.
- `self` representa al propio objeto (instancia).
- Un **objeto** se crea llamando a la clase como si fuera una funci√≥n:  
  `mi_robot = Robot("R2D2", 100)`
PROGRAMACI√ìN ORIENTADA A OBJETOS (POO)
‚îÇ
‚îú‚îÄ‚îÄ CLASE
‚îÇ   ‚îú‚îÄ Es un molde o plano
‚îÇ   ‚îú‚îÄ Define atributos y m√©todos
‚îÇ   ‚îî‚îÄ Ejemplo: class Robot:
‚îÇ
‚îú‚îÄ‚îÄ OBJETO
‚îÇ   ‚îú‚îÄ Es una instancia de una clase
‚îÇ   ‚îú‚îÄ Se crea con: mi_robot = Robot("R2D2", 100)
‚îÇ   ‚îî‚îÄ Tiene estado y comportamiento
‚îÇ
‚îú‚îÄ‚îÄ ATRIBUTOS
‚îÇ   ‚îú‚îÄ Variables internas del objeto
‚îÇ   ‚îú‚îÄ Se definen en __init__ con self.atributo
‚îÇ   ‚îî‚îÄ Ejemplo: self.nombre, self.bateria
‚îÇ
‚îú‚îÄ‚îÄ M√âTODOS
‚îÇ   ‚îú‚îÄ Funciones dentro de la clase
‚îÇ   ‚îú‚îÄ Operan sobre los atributos
‚îÇ   ‚îî‚îÄ Ejemplo: def encender(self):
‚îÇ
‚îú‚îÄ‚îÄ ENCAPSULAMIENTO
‚îÇ   ‚îú‚îÄ Protege atributos internos
‚îÇ   ‚îú‚îÄ Se usa _atributo o propiedades (@property)
‚îÇ   ‚îî‚îÄ Permite validaci√≥n y control
‚îÇ
‚îú‚îÄ‚îÄ HERENCIA
‚îÇ   ‚îú‚îÄ Una clase puede extender otra
‚îÇ   ‚îú‚îÄ Se usa: class SubClase(SuperClase):
‚îÇ   ‚îú‚îÄ Reutiliza atributos y m√©todos
‚îÇ   ‚îî‚îÄ Ejemplo: class RobotMovil(Robot):
‚îÇ
‚îú‚îÄ‚îÄ SOBRESCRITURA
‚îÇ   ‚îú‚îÄ Redefine un m√©todo en la subclase
‚îÇ   ‚îú‚îÄ Permite comportamiento especializado
‚îÇ   ‚îî‚îÄ Ejemplo: def describir(self):  # redefinido
‚îÇ
‚îú‚îÄ‚îÄ POLIMORFISMO
‚îÇ   ‚îú‚îÄ Mismo m√©todo ‚Üí diferentes respuestas
‚îÇ   ‚îú‚îÄ Se usa en listas de objetos
‚îÇ   ‚îî‚îÄ Ejemplo: for r in robots: r.describir()
‚îÇ
‚îî‚îÄ‚îÄ M√âTODOS ESPECIALES
    ‚îú‚îÄ __init__: constructor
    ‚îú‚îÄ __str__: representaci√≥n textual
    ‚îú‚îÄ __repr__: depuraci√≥n
    ‚îî‚îÄ __eq__: comparaci√≥n de objetos
  
""""  
# Definimos la clase base 'Robot'
class Robot:
    """
    Clase que representa un robot gen√©rico.
    Tiene un nombre y un nivel de bater√≠a.
    """

    def __init__(self, nombre, bateria=100):
        # Guardamos el nombre del robot en un atributo
        self.nombre = nombre
        # Guardamos la bater√≠a inicial (por defecto 100)
        self.bateria = bateria
        # Estado inicial: apagado
        self.encendido = False
        # üîπ NUEVOS ATRIBUTOS:
        self.modelo = "Gen√©rico"   # atributo nuevo
        self.version = "1.0"       # atributo nuevo

    def encender(self):
        # Solo puede encenderse si hay bater√≠a
        if self.bateria > 0:
            self.encendido = True
            print(f"{self.nombre} est√° encendido.")
        else:
            print(f"{self.nombre} no puede encenderse: bater√≠a agotada.")

    def apagar(self):
        # Cambiamos el estado a apagado
        self.encendido = False
        print(f"{self.nombre} se apag√≥.")

    def describir(self):
        # Devuelve un texto con la informaci√≥n del robot
        estado = "encendido" if self.encendido else "apagado"
        return f"Robot {self.nombre} | Bater√≠a: {self.bateria}% | Estado: {estado}"

# Creamos un objeto (instancia) de la clase Robot
robot1 = Robot("R2D2", bateria=80)

# Usamos sus m√©todos
print(robot1.describir())   # Muestra la informaci√≥n inicial
robot1.encender()           # Cambia el estado a encendido
print(robot1.describir())   # Ahora debe mostrar "encendido"
robot1.apagar()             # Cambia el estado a apagado

# Definimos una subclase que hereda de Robot
class RobotMovil(Robot):
    """
    Robot que puede moverse en un plano 2D.
    Hereda de Robot y a√±ade atributos x, y.
    """

    def __init__(self, nombre, bateria=100, x=0, y=0):
        # Llamamos al constructor de la clase base
        super().__init__(nombre, bateria)
        # A√±adimos atributos propios
        self.x = x
        self.y = y

    def mover(self, dx, dy):
        # Solo se mueve si est√° encendido
        if self.encendido and self.bateria > 0:
            self.x += dx
            self.y += dy
            # Cada movimiento consume 10% de bater√≠a
            self.bateria = max(0, self.bateria - 10)
            print(f"{self.nombre} se movi√≥ a ({self.x}, {self.y}).")
        else:
            print(f"{self.nombre} no puede moverse (apagado o sin bater√≠a).")

    # Sobrescribimos el m√©todo describir
    def describir(self):
        estado = "encendido" if self.encendido else "apagado"
        return (f"RobotMovil {self.nombre} | Posici√≥n: ({self.x}, {self.y}) | "
                f"Bater√≠a: {self.bateria}% | Estado: {estado}")

# Creamos un objeto de tipo RobotMovil
robot2 = RobotMovil("Wall-E", bateria=50)

print(robot2.describir())  # Muestra la informaci√≥n inicial
robot2.encender()          # Encendemos el robot
robot2.mover(2, 3)         # Lo movemos en el plano
print(robot2.describir())  # Ahora debe mostrar la nueva posici√≥n y bater√≠a

# üîπ NUEVOS ROBOTS CREADOS IGUAL QUE R2D2 Y WALL-E
robot3 = Robot("Robocop", bateria=70)
robot4 = Robot("Robot IIE", bateria=90)

# Creamos una lista con robots de distintos tipos
robots = [robot1, robot2, robot3, robot4]

# Recorremos la lista y llamamos al mismo m√©todo 'describir'
for r in robots:
    print(r.describir())  # Cada objeto responde seg√∫n su clase
